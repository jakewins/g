
WHITESPACE = _{ " " | "\t" | "\r" | "\n" }

expr = { and_expr ~ (^"OR " ~ and_expr)* }
and_expr = { add_sub_expr ~ (^"AND " ~ add_sub_expr)* }

add_sub_expr = { mult_div_expr ~ (add_sub_op ~ mult_div_expr)* }
add_sub_op = ${ "-" | "+" }

mult_div_expr = { term ~ (mult_div_op ~ term)* }
mult_div_op = ${ "*" | "/" }

term = _{ binary_op | atom }

// Need something where like blah() * b.name / 12 + count(*) is handled right
binary_op = { atom ~ op ~ atom }
op = ${ "=" | ">" | "<>" }

atom = _{ bool | science | float | int | prop_lookup | count_call | func_call | string | param | id | list | map | "(" ~ expr ~ ")" }

id = ${ ( ASCII_ALPHA | "_" | "-" ) ~ ( ASCII_ALPHANUMERIC | "_" | "-" )* }

param = ${ "$" ~ id }

prop_lookup = { id ~ ("." ~ id)+ }

// TODO: Use function_id and arglist here
func_call = { id ~ "(" ~ (expr ~ ("," ~ expr)*)? ~ ")" }
count_call = { ^"COUNT" ~ "(" ~ "*" ~ ")" }

function_id = { id ~ ("." ~ id)+ }
arglist = { expr ~ ("," ~ expr)* }

string = ${
  "\"" ~ dblq_str_inner ~ "\"" |
  "'" ~ singleq_str_inner ~ "'" }
dblq_str_inner = @{ dbldq_char* }
dbldq_char = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
}
singleq_str_inner = @{ singleq_char* }
singleq_char = {
    !("'" | "\\") ~ ANY
    | "\\" ~ ("'" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
}

bool = _{ lit_true | lit_false }
lit_true = { ^"TRUE" }
lit_false = { ^"FALSE" }

int = @{
    "-"? ~ ( "0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT* )
}

float = @{
   "-"? ~ ( "0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT* ) ~ "." ~ ASCII_DIGIT*
}

science = @{
    (float | int) ~ ^"E" ~ int
}

map = {
  "{" ~ "}" |
  "{" ~ map_pair ~ ("," ~ map_pair)* ~ "}"
}
map_pair = { id ~ ":" ~ expr }

list = {
  "[" ~ "]" |
  "[" ~ expr ~ ("," ~ expr)* ~ "]"
}

// Multiple labels are supported for CREATE but not yet for MATCH
node = { "(" ~ id? ~ ( ":" ~ label )* ~ map? ~ ")" }
label = { id }

rel = { left_arrow? ~ "-" ~ ( "[" ~ id? ~ ( ":" ~ rel_type )? ~ map? ~ "]" )? ~ "-" ~ right_arrow? }
rel_type = { id }
left_arrow = { "<" }
right_arrow = { ">" }

patterns = _{ pattern ~ ( "," ~ pattern )* }
pattern = { node ~ ( rel ~ node )* }

projection = { expr ~ (^"AS" ~ id)? }
projections = { projection ~ ( "," ~ projection )* }
project_all = { "*" }

distinct_clause = { ^"DISTINCT" }

where_clause = { ^"WHERE" ~ expr }

order_clause = { ^"ORDER BY" ~ order_expr ~ ( "," ~ order_expr )* }
order_expr = { expr ~ (^"DESC" | ^"ASC")? }

skip_clause = { ^"SKIP" ~ expr }
limit_clause = { ^"LIMIT" ~ expr }

optional_clause = { ^"OPTIONAL" }

create_stmt = { ^"CREATE" ~ patterns }
match_stmt = { optional_clause? ~ ^"MATCH" ~ patterns ~ where_clause? }
with_stmt = { ^"WITH" ~ distinct_clause? ~ projections ~ where_clause? ~ order_clause? ~ skip_clause? ~ limit_clause? }
unwind_stmt = { ^"UNWIND" ~ expr ~ ^"AS" ~ id }
call_stmt = { ^"CALL" ~ function_id ~  "(" ~ arglist? ~ ")" }
return_stmt = { ^"RETURN" ~ distinct_clause? ~ ( projections | project_all ) ~ order_clause? ~ skip_clause? ~ limit_clause? }

statement = _{ create_stmt | match_stmt | unwind_stmt | call_stmt | with_stmt }
query = { SOI ~ ( statement )* ~ return_stmt? ~ EOI }